generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profiles {
  id               String             @id @db.Uuid
  name             String?
  height           Int?
  bodyMeasurements BodyMeasurements[]
  exercises        Exercises[]
  workouts         Workouts[]

  @@map("profile")
}

model BodyMeasurements {
  id                Int       @id @default(autoincrement())
  userId            String    @db.Uuid
  weight            Int
  bodyFatPercentage Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  measuredAt        DateTime?
  users             Profiles  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bodyMeasurements")
}

model Workouts {
  id             Int              @id @default(autoincrement())
  userId         String           @db.Uuid
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  workoutedAt    DateTime?
  workoutDetails WorkoutDetails[]
  users          Profiles         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workouts")
}

model WorkoutDetails {
  id         Int          @id @default(autoincrement())
  workoutId  Int
  exerciseId Int
  memo       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  setDetails SetDetails[]
  exercises  Exercises    @relation(fields: [exerciseId], references: [id])
  workouts   Workouts     @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("workoutDetails")
}

model SetDetails {
  id              Int            @id @default(autoincrement())
  workoutDetailId Int
  setNumber       Int
  reps            Int
  weight          Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  workoutDetails  WorkoutDetails @relation(fields: [workoutDetailId], references: [id], onDelete: Cascade)

  @@map("setDetails")
}

model MuscleGroups {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  exercises Exercises[]

  @@map("muscleGroups")
}

model Exercises {
  id             Int              @id @default(autoincrement())
  userId         String?          @db.Uuid
  muscleGroupId  Int
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  muscleGroups   MuscleGroups     @relation(fields: [muscleGroupId], references: [id])
  users          Profiles?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutDetails WorkoutDetails[]

  @@map("exercises")
}

model Contacts {
  id        Int      @id @default(autoincrement())
  title     String
  email     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}
